$date
  Sat May 31 17:01:15 2025
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module std_logic_arith $end
$upscope $end
$scope module std_logic_signed $end
$upscope $end
$scope module interconnexion_tb $end
$var reg 4 ! sel_route_sim[3:0] $end
$var reg 4 " a_in_sim[3:0] $end
$var reg 4 # b_in_sim[3:0] $end
$var reg 8 $ s_sim[7:0] $end
$var reg 8 % mem_cache_1_in_sim[7:0] $end
$var reg 1 & mem_cache_1_out_enable_sim $end
$var reg 8 ' mem_cache_1_out_sim[7:0] $end
$var reg 8 ( mem_cache_2_in_sim[7:0] $end
$var reg 1 ) mem_cache_2_out_enable_sim $end
$var reg 8 * mem_cache_2_out_sim[7:0] $end
$var reg 4 + buffer_a_sim[3:0] $end
$var reg 1 , buffer_a_enable_sim $end
$var reg 4 - buffer_b_sim[3:0] $end
$var reg 1 . buffer_b_enable_sim $end
$var reg 2 / sel_out_sim[1:0] $end
$var reg 8 0 res_out_sim[7:0] $end
$var reg 1 1 ready_sim $end
$scope module interconnexion_inst $end
$var reg 4 2 sel_route[3:0] $end
$var reg 4 3 a_in[3:0] $end
$var reg 4 4 b_in[3:0] $end
$var reg 8 5 s[7:0] $end
$var reg 8 6 mem_cache_1_in[7:0] $end
$var reg 1 7 mem_cache_1_out_enable $end
$var reg 8 8 mem_cache_1_out[7:0] $end
$var reg 8 9 mem_cache_2_in[7:0] $end
$var reg 1 : mem_cache_2_out_enable $end
$var reg 8 ; mem_cache_2_out[7:0] $end
$var reg 4 < buffer_a[3:0] $end
$var reg 1 = buffer_a_enable $end
$var reg 4 > buffer_b[3:0] $end
$var reg 1 ? buffer_b_enable $end
$var reg 2 @ sel_out[1:0] $end
$var reg 8 A res_out[7:0] $end
$var reg 1 B ready $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b0000 !
b1010 "
b0000 #
b00000000 $
b00000000 %
0&
b00000000 '
b00000000 (
0)
b00000000 *
b1010 +
1,
b0000 -
0.
b00 /
b00000000 0
01
b0000 2
b1010 3
b0000 4
b00000000 5
b00000000 6
07
b00000000 8
b00000000 9
0:
b00000000 ;
b1010 <
1=
b0000 >
0?
b00 @
b00000000 A
0B
#10000000
b1110 !
b00000001 $
1&
b00000001 '
b0000 +
0,
b1110 2
b00000001 5
17
b00000001 8
b0000 <
0=
#20000000
b0000 !
b00000011 $
0&
b00000000 '
b1010 +
1,
b11 /
b00000011 0
11
b0000 2
b00000011 5
07
b00000000 8
b1010 <
1=
b11 @
b00000011 A
1B
#30000000
